类和对象_2
原创Hot-pot 最后发布于2020-03-15 22:23:40 阅读数 2  收藏
编辑 展开
类与对象知识点梳理_2

一、类的6个默认成员函数：
任何一个类在我们不写的情况下，都会自动生成一下6个默认成员函数。

1.构造函数：
a.该函数名与类名相同，创建类类型对象时由编译器自动调用，保证每个数据成员都由一个合适的初始值，并且在对象的生命周期内只调用一次。
b.构造函数并不是开空间创建对象，而是初始化对象。
c.特征：函数名与类名相同。
无返回值
对象实例化时编译器自动调用对应的构造函数
构造函数可以重载

一般情况下对于构造函数的定义，使用全缺省方式较为稳妥 （一下示例代码为全缺省构造函数）

class date{
public:
	date(int year = 1990,int month = 1,int day = 1){
		_year = year;
		_month = month;
		_day = day;
	}
	void printdate(){
		cout << _year << " " << _month << " " << _day << endl;
	}

private:
	int _year;
	int _month;
	int _day;
};

当屏蔽掉我们自己编写的构造函数，会发现编译器自动生成的构造函数 在打印出来以后 各成员变量的值依然为随机值，那么是否说明编译器自动生成的构造函数并没有实际意义呢？

class Time
{
public:
	Time()
	{
		cout << "Time()" << endl;
			_hour = 0;
		_minute = 0;
		_second = 0;
	}
private:
	int _hour;
	int _minute;
	int _second;
};
class Date
{
private:
	// 基本类型(内置类型)
	int _year;
	int _month;
	int _day;
	// 自定义类型
	Time _t;
};
int main()
{
	Date d;
	return 0;
}


上述代码调试结果表面，编译器默认生成的构造函数会对自定义类型成员 _t 去调用它的默认成员函数。

2.析构函数：
对象在销毁时会自动调用析构函数，完成类的一些资源清理工作。（完成比如当类中有一些malloc开辟的空间，会在析构函数中有free函数去进行释放，将一些指针置空，防止野指针等工作）
特征：
a.析构函数名是在类名前加上字符~
b.无参数无返回值
c.一个类有且只有一个析构函数。如果没有自定义，那么系统会自动生成默认的析构函数
d.对象生命周期结束时，c++编译系统会自动调用析构函数。

3.拷贝构造函数：
概念: 只有单个形参，该形参是对本类型对象的引用,在用已经存在的类类型对象创建新对象时由编译器自动调用。
特征
1.拷贝构造函数时构造函数的一个重载形式。
2.拷贝构造函数的参数只有一个且必须使用引用传参，使用传值方式会引发无穷递归调用。

4.赋值运算符重载：增强了代码可读性
运算符重载是具有特殊函数名的函数，也具有其返回值类型，函数名字以及参数列表，其返回值类型与参数列表与普通的函数类似。
函数名字：关键字operator后面接需要重载的运算符符号
函数原型：返回值类型 operator操作符 （参数列表）；
** 注意：.* 、:: 、sizeof 、 ?: 、 . 这*五个运算符不能重载**
运算符重载的一些特性 在下文代码及其注释中有体现：

class Time
{
public:
	Time(int hour = 0,int minute = 0,int second = 0)
	{
		_hour = hour;
		_minute = minute;
		_second = second;
	}
	bool operator==(const Time& t){
		/*
		  若在类外 参数列表应为（const Time&t1,const Time&t2）
		  因是两个操作数进行比较 
		  但是语法规定，作为类成员的重载函数时，其形参列表
		  看起来比操作数数目少一个成员函数，这是因为成员函数
		  的参数列表有一个默认的形参this，且this限定为第一个形参
		*/
		return _hour == t._hour&&
			_minute == t._minute&&
			_second == t._second;
	}
private:
	int _hour;
	int _minute;
	int _second;
};

int main()
{
	Time t1(10,10,10);
	Time t2(10, 1, 10);
	cout << (t1 == t2) << endl;//调用过程 t1.operator==t2  ----> t1.operator(&t1,&t2);
	return 0;
}
————————————————
版权声明：本文为CSDN博主「Hot-pot」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_44839962/article/details/104842154