#define _CRT_SECURE_NO_WARNINGS 1

/*
1、c++异常概念:
什么是异常？
	异常是一种处理错误的方式，当一个函数发现自己无法处理的错误时就可以抛出
  异常，让函数的直接或间接调用者处理这个错误。
  
  throw:当问题出现时，程序会抛出一个异常。这是通过使用throw关键字来完成的
  catch：在你想要处理问题的地方，用过异常处理程序捕获异常（catch关键字用于
  捕获异常，可以有很多个catch进行捕获）
  try:try块中的代码标识将被激活的特定异常，它后面通常跟着一个或多个catch块

2、异常的使用
	2.1异常的抛出和捕获：
		2.1.1异常的抛出和匹配原则:
			*异常是通过抛出对象而引发的，该对象的类型决定了应该激活哪个catch的处理代码
			*被选中的处理代码是调用链中与该对象类型匹配且离抛出异常位置最近的那一个
			*抛出异常对象后，会生成一个异常对象的拷贝，因为抛出的异常对象可能是一个临时
			对象，所以会生成一个拷贝对象，这个拷贝的临时对象会在被catch以后销毁（类似函数的传值返回）
		2.1.2在函数调用链中异常栈展开匹配原则
			*首先检查throw本身是否在try块内部，如果是，再查找匹配的catch语句。如果有匹配的，
			则调到catch的地方进行处理。
		    *没有匹配的catch则退出当前函数栈，继续在调用函数的栈中进行查找匹配的catch。
			*如果达到main函数的栈，依旧没有匹配的，则终止程序。
			（以上过程就称为栈展开）
			*找到匹配的catch子句并处理以后，会继续沿着catch子句后面继续执行
 
3.异常安全：
	*构造函数完成对象的构造和初始化，最好不要在构造函数中抛出异常，否则可能导致对象不完整或没
	有完全初始化
	*析构函数主要完成资源清理，最好不要在析构函数内抛出异常，否则可能导致资源泄漏（没存泄露，句柄未关闭等）

	3.1异常规范
		*异常规格说明的目的是为了让函数使用者知道该函数可能抛出的异常有哪些，
		可在函数的后面接throw(类型)，列出这个函数可能抛掷的所有异常类型
		*函数后面接throw()，表示函数不抛异常。
		*若无异常结构声明，则此函数可以抛掷任何类型的异常
		例子:
			void fun() throw(A,B,C); //表示这个函数会抛出A/B/C中的某种类型的异常
			void* operator new(std::size_t size) throw (std::bad_alloc);//表示这个函数之会抛出bad_alloc的异常
			void* operator delete(std::size_t size,void* ptr)thow();//表示这个函数不会抛出异常
4.自定义异常体系：
	实际使用中很多公司都会自定义自己的异常体系进行规范的异常管理，因为一个
	项目中如果大家各跑各的异常，那么外层调用者很难捕获。所以，实际中会定义
	一套继承的规范体系。这样大家抛出的都是继承的派生类对象，捕获用一个基类捕获就可以。
	（基类指针，指向哪个派生类对象，就会调用谁）继承和多态方面的知识点

5.c++标准库的异常体系 std::exception(可借助文档查看)

6.异常的优缺点：
	优点：
		1.清晰的包含错误信息
		2.面对 T operator[]（int i）这样的函数的越界错误，异常可以很好的解决
		3.多层调用时，里面发生错误，不再需要层层处理，最外层直接捕获即可
		4.很多第三方库都使用异常，我们也使用异常可以更好的使用它们。
	缺点：
		1.异常会导致执行流跳跃，会给调试分析带来困难
		2.异常安全问题 （内存泄漏等）
		3.c++的库里的异常体系定义不太好用，很多公司都会选择自己定义
 */