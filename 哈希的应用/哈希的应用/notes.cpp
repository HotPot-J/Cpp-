#define _CRT_SECURE_NO_WARNINGS 1

/*
哈希的应用：
	1.位图
		所谓位图，就是用每一位来存放某种状态，适用于海量数据，
		数据无重复的场景。通常是用来判断某个数据存不存在的。

		多用于：
			a.快速查找某个数据是否在一个集合中
			b.排序+去重
			c.求两个集合的交集
			d.操作系统中磁盘块标记

		优点：节省空间
		缺点：只能处理整型
	
	例题：
		给40亿个不重复的无符号整数，无序，给一个无符号整数，如何快速
		判断一个数是否在这40亿个数当中？

		1.排序，二分查找
		2.set/unorderd_set
		这两种方法都需要存起来进行查找，40个无符号整数大约16G，
		对内存要求太大 不适用。

	位图法解决:
		把用int数组当中的每个元素看成比特位，一个元素32位，第几位就
		表示数字几，若存在 则将其置为1，可大大节省空间
		(给40亿个不重复的无符号整数几乎覆盖了整型，最大为2^32次方
		开辟2^32个比特位需要  2^32位536870912字节 大约500M
		)


	2.布隆过滤器
		实质：哈希与位图的结合
		思想: 将一个s元素用多个哈希函数映射到一个位图中
		
		优点：节省空间，高效，可以标记存储任意类型
		缺点：存在误判（哈希冲突） 不允许删除（一个key对应多个位置，如果删除会影响其他key的映射关系）

		一致性哈希:
			给了一个比较大的除数去建立哈希关系，把每一段范围和某台机器建立
			映射，再让数据所运算的哈希值和对应范围的具体机器建立映射关系 
			当增加机器时，只需要迁移部分数据即可
*/

